# -*- coding: utf-8 -*-
"""Random_forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18SSJ3IJ80q-JnWMWDKxQ3DVDUxvIj9Ci
"""

import pandas as pd
import numpy as np
from sklearn import model_selection
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from math import sqrt

df = pd.read_csv('/content/drive/MyDrive/Research/weather_five_minutes.csv')

print(df.shape)
df.describe()

df.drop(['--Timestamp---',' UV '],axis=1,inplace=True)

target_column = ['Solar'] 
predictors = ['Temp', 'Chill', 'Humid', 'Dewpt',' Wind ','HiWind','Rain ','Barom',' ET  ']
df[predictors] = df[predictors]/df[predictors].max()
df.describe()

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
X = df[predictors].values
y = df[target_column].values
X=scaler.fit_transform(X)
y=scaler.fit_transform(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=40)
print(X_train.shape); print(X_test.shape)

from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import RandomForestRegressor   
regressor = RandomForestRegressor(n_estimators = 100, random_state = 0)
regressor.fit(X_train, y_train)

pred_test_rr= regressor.predict(X_test)

from sklearn.metrics import mean_absolute_error
print("RMSE",np.sqrt(mean_squared_error(y_test,pred_test_rr))) 
print("MSE",mean_squared_error(y_test,pred_test_rr))
print("mae",mean_absolute_error(y_test,pred_test_rr))

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (8,3)
plt.plot(y_test[0:50],label="Actual Solar energy",color='green')
plt.plot(pred_test_rr[0:50],label="Predicted solar Energy",color='yellow')
plt.xlabel('Number of Observation',fontsize=15)
plt.ylabel('Solar Energy(W/mÂ²)',fontsize=15)
plt.title('Solar Energy Prediction using Ridge Regression ',fontsize=20)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
plt.scatter(y_test[100:2000],pred_test_rr[100:2000],color='purple')