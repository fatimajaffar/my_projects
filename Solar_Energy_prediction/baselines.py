# -*- coding: utf-8 -*-
"""Baselines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K9aqutrCZdGpgXf1pfCULH8GZb1jV5xV
"""

import pandas as pd
import numpy as np
from sklearn import model_selection
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from math import sqrt

df = pd.read_csv('/content/drive/MyDrive/Research/weather_five_minutes.csv')

print(df.shape)
df.describe()

df.drop(['--Timestamp---',' UV '],axis=1,inplace=True)

target_column = ['Solar'] 
predictors = ['Temp', 'Chill', 'Humid', 'Dewpt',' Wind ','HiWind','Rain ','Barom',' ET  ']
df[predictors] = df[predictors]/df[predictors].max()
df.describe()

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
X = df[predictors].values
y = df[target_column].values
X=scaler.fit_transform(X)
y=scaler.fit_transform(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=40)
print(X_train.shape); print(X_test.shape)

from sklearn.metrics import mean_absolute_error
rr = Ridge(alpha=0.01)
rr.fit(X_train, y_train) 
pred_train_rr= rr.predict(X_train)

print("Testing")
pred_test_rr= rr.predict(X_test)
print("RMSE",np.sqrt(mean_squared_error(y_test,pred_test_rr))) 
print("MSE",mean_squared_error(y_test,pred_test_rr))
print("mae",mean_absolute_error(y_test,pred_test_rr))

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (8,3)
plt.plot(y_test[0:50],label="Actual Solar energy",color='green')
plt.plot(pred_test_rr[0:50],label="Predicted solar Energy",color='yellow')
plt.xlabel('Number of Observation',fontsize=15)
plt.ylabel('Solar Energy(W/m²)',fontsize=15)
plt.title('Solar Energy Prediction using Ridge Regression ',fontsize=20)
plt.legend()
plt.show()

import matplotlib.pyplot as plt
plt.scatter(y_test[100:2000],pred_test_rr[100:2000],color='blue')

model_lasso = Lasso(alpha=0.01)
model_lasso.fit(X_train, y_train) 
pred_train_lasso= model_lasso.predict(X_train)

pred_test_lasso= model_lasso.predict(X_test)
print("RMSE",np.sqrt(mean_squared_error(y_test,pred_test_lasso))) 
print("MSE",mean_squared_error(y_test,pred_test_lasso))
print("mae",mean_absolute_error(y_test,pred_test_lasso))

plt.rcParams["figure.figsize"] = (8,3)
plt.plot(y_test[0:50],label="Actual Solar Energy",color='green')
plt.plot(pred_test_lasso[0:50],label="Predicted Solar Energy ",color='yellow')
plt.xlabel('Number of Observation',fontsize=15)
plt.ylabel('Solar Energy(W/m²)',fontsize=15)
plt.title('Solar Energy Prediction using Lasso Regression ',fontsize=20)
plt.legend()
plt.show()

plt.scatter(y_test[100:2000],pred_test_lasso[100:2000],color='blue')

model_enet = ElasticNet(alpha = 0.01)
model_enet.fit(X_train, y_train) 
pred_train_enet= model_enet.predict(X_train)


pred_test_enet= model_enet.predict(X_test)
print("RMSE",np.sqrt(mean_squared_error(y_test,pred_test_enet))) 
print("MSE",mean_squared_error(y_test,pred_test_enet))
print("mae",mean_absolute_error(y_test,pred_test_enet))

plt.rcParams["figure.figsize"] = (8,3)
plt.plot(y_test[0:50],label="Actual Solar Energy ",color='green')
plt.plot(pred_test_enet[0:50],color="yellow",label="Predicted Solar Energy")
plt.xlabel('Number of Observations',fontsize=15)
plt.ylabel('Solar Energy(W/m²)',fontsize=15)
plt.title('Solar Energy Prediction using ElasticNet Regression ',fontsize=20)
plt.legend()
plt.show()

plt.scatter(y_test[100:2000],pred_test_enet[100:2000],color='blue')

regressor = SVR()
regressor.fit(X_train, y_train)

import pandas as pd
import numpy as np
from sklearn import model_selection
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from math import sqrt

pred_test_SVR= regressor.predict(X_test)
print("RMSE",np.sqrt(mean_squared_error(y_test,pred_test_SVR))) 
print("MSE",mean_squared_error(y_test,pred_test_SVR))
print("mae",mean_absolute_error(y_test,pred_test_SVR))

plt.rcParams["figure.figsize"] = (8,3)
plt.plot(y_test[0:50],label="Actual solar energy ",color='green')
plt.plot(pred_test_SVR[0:50],color="yellow",label="Predicted solar energy ")
plt.xlabel('Number of Observations',fontsize=15)
plt.ylabel('Solar Energy(W/m²)',fontsize=15)
plt.title('Solar Energy Prediction using SVR Regression ',fontsize=20)
plt.legend()
plt.show()

plt.scatter(y_test[100:2000],pred_test_SVR[100:2000],color='blue')

from pylab import rcParams
plt.rcParams["figure.figsize"] = (8,3)
import matplotlib.pyplot as plt
plt.plot(y_test[0:50],color='m',label="actual")
plt.plot(pred_test_rr[0:50],color='r',label="Ridge")
plt.plot(pred_test_lasso[0:50],color="k",label="LASSO")
plt.plot(pred_test_enet[0:50],color="b",label="Elasticnet")
plt.plot(pred_test_SVR[0:50],color="g",label="SVR")

plt.xlabel('Number of Observations',fontsize=15)
plt.ylabel('solar energy',fontsize=15)
plt.legend()
plt.show()

plt.rcParams["figure.figsize"] = (20,10)
plt.scatter(y_test[0:10000],pred_test_rr[0:10000],color='r',label="Ridge")
plt.scatter(y_test[0:10000],pred_test_lasso[0:10000],color='b',label="LASSO")
plt.scatter(y_test[0:10000],pred_test_enet[0:10000],color='y',label="ELASTICNET")
plt.scatter(y_test[0:10000],pred_test_SVR[0:10000],color='g',label="SVR")
plt.xlabel("Actual solar energy W/m² ")
plt.ylabel("Predicted Solar energy(W/m²)")
plt.legend()